{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-9d7246e8-1613-4590-a8a5-01dd8f59b8a0",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `MAINTAINER` instruction in Dockerfiles has been deprecated since Docker 1.13.0. It is recommended to use the `LABEL` instruction instead for specifying the maintainer of the Docker image. Using deprecated instructions can lead to issues with compatibility and support in the future.\n\n## Mitigation Advice\n\nTo mitigate this issue, replace the `MAINTAINER` instruction with the `LABEL` instruction. The `LABEL` instruction is more flexible and can be used to specify multiple metadata entries for a Docker image.\n\n## Source Code Fix Recommendation\n\nReplace:\n\n```Dockerfile\nMAINTAINER \"Subash SN\"\n```\n\nwith:\n\n```Dockerfile\nLABEL maintainer=\"Subash SN\"\n```\n\n## Library Dependencies\n\nThis code does not require any library dependencies to execute properly as it is a Dockerfile instruction.\n\n## References\n\n- [OWASP Docker Security](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n- [CWE-477: Use of Obsolete Function](https://cwe.mitre.org/data/definitions/477.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.maintainer-is-deprecated"
                ]
              }
            },
            {
              "id": "glog-c978172a-5b74-422c-ad98-ef9494148c61",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `MAINTAINER` instruction in Dockerfiles has been deprecated since Docker 1.13.0. It is recommended to use the `LABEL` instruction instead for specifying the maintainer of the Docker image. Using deprecated instructions can lead to issues with compatibility and support in the future.\n\n## Mitigation Advice\n\nTo mitigate this issue, replace the `MAINTAINER` instruction with the `LABEL` instruction. The `LABEL` instruction is more flexible and can be used to specify multiple metadata entries for a Docker image.\n\n## Source Code Fix Recommendation\n\nReplace:\n\n```Dockerfile\nMAINTAINER \"Subash SN\"\n```\n\nwith:\n\n```Dockerfile\nLABEL maintainer=\"Subash SN\"\n```\n\n## Library Dependencies\n\nThis code does not require any library dependencies to execute properly as it is a Dockerfile instruction.\n\n## References\n\n- [OWASP Docker Security](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n- [CWE-477: Use of Obsolete Function](https://cwe.mitre.org/data/definitions/477.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.maintainer-is-deprecated"
                ]
              }
            },
            {
              "id": "glog-ca283379-a460-4a14-b501-915c9f6c5b1e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nPotential Root User Exploitation in Docker Container is a security vulnerability that occurs when a Docker container is run as a root user. This is a serious security issue because if an attacker manages to break out from the container, they would have root access to the host system. This could lead to a complete system compromise.\n\nIn the provided code snippet, the Docker container is being run with the default user, which is root. This is a potential security risk.\n\n```javascript\nCMD [\"bash\", \"/app/entrypoint.sh\"]\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always run Docker containers as a non-root user. This can be achieved by creating a new user in the Dockerfile and switching to that user before executing any commands.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code snippet:\n\n```javascript\nRUN useradd -ms /bin/bash newuser\nUSER newuser\nCMD [\"bash\", \"/app/entrypoint.sh\"]\n```\n\nIn the above code, a new user `newuser` is created and the Docker container is run as this user.\n\n## Library Dependencies\n\nThe provided code snippet does not require any JavaScript library dependencies to execute properly.\n\n## References\n\n- [CWE-250: Execution with Unnecessary Privileges](https://cwe.mitre.org/data/definitions/250.html)"
              },
              "properties": {
                "tags": [
                  "dockerfile.security.missing-user.missing-user"
                ]
              }
            },
            {
              "id": "glog-27ebdec6-7869-4e6d-b871-18296bd1c3a4",
              "help": {
                "text": "",
                "markdown": "## Description\n\nPotential Root User Exploitation in Docker Container Programs is a security vulnerability that occurs when Docker containers are run with root privileges. This can lead to serious security issues as it gives the attacker the ability to gain root access to the host system if they manage to break out of the container. In JavaScript programming, this vulnerability can be exploited if the Docker container running the JavaScript application is configured to run as root.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to follow the principle of least privilege. This means that you should only grant the permissions that are absolutely necessary for the operation of the Docker container. Specifically, you should avoid running Docker containers as root whenever possible. Instead, you should run your containers as a non-root user.\n\n## Source Code Fix Recommendation\n\nIn your Dockerfile, you can specify a non-root user to run the container. Here is an example of how you can do this:\n\n```Dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN adduser -D user\nUSER user\nCMD [\"/bin/bash\", \"/app/entrypoint-dev.sh\"]\n```\n\nIn this example, a new user named 'user' is created and the Docker container is configured to run as this user.\n\n## Library Dependencies\n\nThe code example provided does not require any specific JavaScript library dependencies to execute properly. However, it does require Docker to build and run the container, and Node.js to run the JavaScript application inside the container.\n\n## References\n\n- [CWE-250: Execution with Unnecessary Privileges](https://cwe.mitre.org/data/definitions/250.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.missing-user"
                ]
              }
            },
            {
              "id": "glog-1d8a8e69-d50d-4ed2-b047-f7e9f20b8abe",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe code snippet provided is a configuration for Sequelize, a promise-based Node.js ORM for Postgres, MySQL, MariaDB, SQLite, and Microsoft SQL Server. The vulnerability here is that the connection to the MySQL server is not using Transport Layer Security (TLS), which can expose the application to Man-in-the-Middle (MITM) attacks. In a MITM attack, the attacker intercepts and potentially alters the communication between two parties without their knowledge.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should enable TLS for your Sequelize connection. This will encrypt the data being sent between your application and the MySQL server, making it much more difficult for an attacker to read or modify the data.\n\n## Source Code Fix Recommendation\n\nHere is how you can enable TLS in your Sequelize configuration:\n\n```javascript\nconst fs = require('fs');\n\nmodule.exports = {\n  username: process.env.MYSQL_USER,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE,\n  host: process.env.MYSQL_HOST || 'mysql-db',\n  port: process.env.MYSQL_PORT || 3306,\n  dialect: 'mysql',\n  dialectOptions: {\n    ssl: {\n      ca: fs.readFileSync(__dirname + '/mysql-ca-master.crt')\n    }\n  }\n}\n```\n\nIn this example, `mysql-ca-master.crt` is the Certificate Authority (CA) certificate. You should replace this with the path to your own CA certificate.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `sequelize`: This is the main library that the code is configuring.\n- `mysql2`: This is the MySQL client for Node.js that Sequelize uses to connect to the MySQL server.\n- `fs`: This is a built-in Node.js module for working with the file system. It's used here to read the CA certificate.\n\n## References\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls"
                ]
              }
            },
            {
              "id": "glog-073fecb9-cbcb-47e5-8f84-63ad92691be4",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability \"Remote Code Execution Vulnerability via Object Deserialization in serialize.unserialize Function\" in JavaScript refers to a security flaw where an attacker can execute arbitrary code remotely on the victim's system. This is achieved by exploiting the `serialize.unserialize` function, which is used to convert a serialized string back into a JavaScript object. If an attacker can control the input to this function, they can craft a serialized string that, when unserialized, leads to the execution of malicious code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid deserializing objects from untrusted sources. If you must deserialize objects, ensure that you're doing so in a safe manner. This can be achieved by using a safe, alternative method for data transfer such as JSON, or by implementing strict input validation and sanitization before deserializing objects.\n\n## Source Code Fix Recommendation\n\nInstead of using `serialize.unserialize`, consider using `JSON.parse` which is a safer alternative. Here's how you can modify the code:\n\n```javascript\nvar products = JSON.parse(req.files.products.data.toString('utf8'));\n```\n\n## Library Dependencies\n\nThe code example provided requires the `serialize` library to execute properly.\n\n## OWASP and CWE Resources\n\n- [OWASP Deserialization Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n- [CWE-502: Deserialization of Untrusted Data](https://cwe.mitre.org/data/definitions/502.html)\n\nPlease note that these links are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization"
                ]
              }
            },
            {
              "id": "glog-1e7e4570-78ed-4415-be94-3125a123eb47",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability \"Non-literal $EXEC() calls detected, potential for command injection vulnerability\" refers to a situation where an application allows an attacker to control the argument to a `exec()` function call in JavaScript. This can lead to command injection attacks, where the attacker can execute arbitrary commands on the system where the application is running.\n\nIn the provided code, the `exec()` function is used to execute a `ping` command with an argument (`req.body.address`) that is controlled by the user. This can be exploited by an attacker to run arbitrary commands on the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `exec()` with user-controlled input. If you need to run system commands, consider using safer alternatives that allow you to pass arguments separately from the command itself, such as `child_process.execFile()` or `child_process.spawn()`. These functions do not use the shell to execute the command, which makes them less susceptible to command injection attacks.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `child_process.execFile()`:\n\n```javascript\nvar execFile = require('child_process').execFile;\n\nexecFile('ping', ['-c', '2', req.body.address], function (err, stdout, stderr) {\n    output = stdout + stderr;\n    res.render('app/ping', {\n        output: output\n    });\n});\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Express.js (for handling HTTP requests and responses)\n- child_process (for executing system commands)\n\n## References\n\n- [OWASP Command Injection](https://owasp.org/www-community/attacks/Command_Injection)\n- [CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')](https://cwe.mitre.org/data/definitions/78.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.detect-child-process"
                ]
              }
            },
            {
              "id": "glog-9e15b6ee-8adf-46e1-857b-d6047e0d834e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe code snippet provided is vulnerable to Cross-Site Scripting (XSS) attacks. XSS is a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user.\n\nIn this case, the vulnerability arises from the fact that user-controlled data (`req.body.name`) is directly used in a database query and then rendered on the client side without proper sanitization or encoding. This could allow an attacker to inject malicious scripts by providing specially crafted input.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should:\n\n1. Always validate user input: Ensure that user-controlled data is valid and safe before using it in your application.\n\n2. Use parameterized queries or prepared statements: This can help prevent SQL injection attacks.\n\n3. Encode user-controlled data: Before rendering user-controlled data on the client side, make sure to properly encode it to prevent XSS attacks.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the code using the `escape-html` library to encode user-controlled data:\n\n```javascript\nconst escapeHtml = require('escape-html');\n\ndb.Product.findAll({\n\twhere: {\n\t\tname: {\n\t\t\t[Op.like]: '%' + escapeHtml(req.body.name) + '%'\n\t\t}\n\t}\n}).then(products => {\n\toutput = {\n\t\tproducts: products,\n\t\tsearchTerm: escapeHtml(req.body.name)\n\t}\n\tres.render('app/products', {\n\t\toutput: output\n\t})\n})\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Sequelize (for the `db.Product.findAll` function and `Op.like` operator)\n- Express (for handling HTTP requests and responses)\n- escape-html (for encoding user-controlled data)\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-a4a7eca9-75b2-4251-b068-7e07c3652f2b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when user-supplied data is not properly sanitized or escaped before being embedded into an EJS (Embedded JavaScript) template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape user-supplied data before embedding it into an EJS template. This can be done using the `<%= %>` syntax in EJS, which automatically escapes HTML special characters. Additionally, it is also recommended to validate and sanitize user-supplied data before using it in any context.\n\n## Source Code Fix Recommendation\n\nReplace `<%- output.searchTerm %>` with `<%= output.searchTerm %>`. The `<%- %>` syntax in EJS does not escape HTML special characters, while the `<%= %>` syntax does.\n\n```javascript\nListing products with <strong>search query: </strong> <%= output.searchTerm %>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP and CWE Links\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-5874e027-07ac-4d14-bcb7-da84e9449c0d",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application uses untrusted data in the EJS template without proper validation or escaping. This allows an attacker to inject malicious scripts into the web page, which will be executed in the user's browser. This is a type of Cross-Site Scripting (XSS) vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data before using it in the EJS template. This can be done using the `<%- %>` syntax in EJS, which automatically escapes the output.\n\n## Source Code Fix Recommendation\n\nThe provided code snippet is already using the `<%- %>` syntax, which means it is correctly escaping the output. If it was using `<%= %>`, it would be vulnerable to XSS attacks. Here is the corrected code:\n\n```ejs\n<td><%- output.products[i].id %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-cd1ae12b-c1db-4c2e-8084-2ace2687031e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code snippet, the application is using EJS (Embedded JavaScript) templates to generate HTML markup with plain JavaScript. The `<%- %>` syntax in EJS is used to output the unescaped value into the template. This means that if `output.products[i].name` contains any malicious script, it will be executed in the browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use the `<%= %>` syntax in EJS templates to output the escaped value into the template. This will ensure that any special characters are properly escaped and won't be executed as script in the browser.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code snippet:\n\n```javascript\n<td><%= output.products[i].name %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- EJS\n\n## OWASP and CWE Resources\n\n- [OWASP Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-93046c14-faac-4b42-9dd4-0e1ca1fb3928",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, manipulate web content, or perform actions on behalf of the user without their consent.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in an EJS template. This can be done using the `<%- %>` syntax in EJS, which automatically escapes HTML characters. Never use the `<%= %>` syntax with untrusted data, as this does not escape HTML characters and can lead to XSS attacks.\n\n## Source Code Fix Recommendation\n\nThe provided code snippet is already using the `<%- %>` syntax, which means it is correctly escaping the `output.products[i].code` data. If it was using the `<%= %>` syntax, it would need to be changed to `<%- %>` to fix the vulnerability.\n\n```javascript\n<td><%- output.products[i].code %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- EJS: A JavaScript templating engine used to generate HTML markup with plain JavaScript.\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-54a76b86-a166-4991-a16d-b9efd1071720",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, manipulate web content, or perform actions on behalf of the user without their consent.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in your templates. This can be done using the `<%- %>` syntax in EJS, which escapes HTML entities in the output. Never trust data that comes from an external source.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code:\n\n```javascript\n<td><%= output.products[i].description %></td>\n```\n\nIn this version, the `<%= %>` syntax is used instead of `<%- %>`. This will escape any HTML entities in the `description` property, preventing XSS attacks.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS: A templating engine for JavaScript.\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-f070e6a1-fa54-472a-9f64-daf77ca72c99",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, manipulate web content, or perform actions on behalf of the user without their consent.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in your templates. This can be done using the `<%= %>` syntax in EJS, which automatically escapes HTML characters. Never use the `<%- %>` syntax with untrusted data, as this does not escape HTML characters and can lead to XSS attacks.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the vulnerability in your code:\n\n```javascript\n<td><%= output.products[i].tags %></td>\n```\n\nThis will ensure that any HTML characters in `output.products[i].tags` are properly escaped.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- EJS\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-9d7246e8-1613-4590-a8a5-01dd8f59b8a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Deprecation of MAINTAINER\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7,
                  "endLine": 4,
                  "endColumn": 17,
                  "snippet": {
                    "text": "LABEL MAINTAINER \"Subash SN\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1e48706ff328245adc78ba03b4473bc7c375f3619e4690338969e97dcbe9174ee143d8b2641e25039717d1b574089497519ffe610b69b89b058350dcd0bf62f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-c978172a-5b74-422c-ad98-ef9494148c61",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Deprecation of MAINTAINER\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile-dev",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 7,
                  "endLine": 5,
                  "endColumn": 17,
                  "snippet": {
                    "text": "LABEL MAINTAINER \"Subash SN\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a6b378a49e8312338ea4c6ef8524dddd1203d89310471e05b6273cc1a223462eea1ff651312b4a858dda60f61945a848abc6395d50b297e992d026ced73081c5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ca283379-a460-4a14-b501-915c9f6c5b1e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Potential Root User Exploitation in Docker Container"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 35,
                  "snippet": {
                    "text": "CMD [\"bash\", \"/app/entrypoint.sh\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bccabffb5c84e5098711500671a2a072bf4edcd6333a14e152e509c4f1492ec1eb7ca5330d6ea85d0b094f2a749235a2f3f62b59a520ebe71aa0443ec4d4140b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-27ebdec6-7869-4e6d-b871-18296bd1c3a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Potential Root User Exploitation in Docker Container Programs"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile-dev",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 44,
                  "snippet": {
                    "text": "CMD [\"/bin/bash\", \"/app/entrypoint-dev.sh\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c8712b57c8c00671119581631d51a65ba5ed79049a12b8157c15fbf7db7e77cb8b26ad01fa484e2c3fece9a42339bc1e8e8873c59cc2dcf8ede32b13321d890b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-1d8a8e69-d50d-4ed2-b047-f7e9f20b8abe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Postgresql Server Vulnerability to MITN Attacks due to Disabled TLS in Sequelize\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/db.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 18,
                  "endLine": 8,
                  "endColumn": 2,
                  "snippet": {
                    "text": "module.exports = {\n  username: process.env.MYSQL_USER,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE,\n  host: process.env.MYSQL_HOST || 'mysql-db',\n  port: process.env.MYSQL_PORT || 3306,\n  dialect: 'mysql'\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "91e2caa52ad57801a4b4acc880b83b474e45621f0aa140f9519cd96ef1627b2d3131b6c3a0648aebe84f07c8f0563a6ec9bd471e050ff31e1971db9792447ba9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-073fecb9-cbcb-47e5-8f84-63ad92691be4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Remote Code Execution Vulnerability via Object Deserialization in serialize.unserialize Function\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/appHandler.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 18,
                  "endLine": 218,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\t\tvar products = serialize.unserialize(req.files.products.data.toString('utf8'))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2adc432926b208d144359007f634acafe43aa8ce955432f9f7f4d3b18b04dbf3a881584882c29804d96c3bc7ff57e51db78438d8fd8e3335e7dd8cac113d8ee_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-1e7e4570-78ed-4415-be94-3125a123eb47",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Non-literal $EXEC() calls detected, potential for command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/appHandler.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 2,
                  "endLine": 44,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\texec('ping -c 2 ' + req.body.address, function (err, stdout, stderr) {\n\t\toutput = stdout + stderr\n\t\tres.render('app/ping', {\n\t\t\toutput: output\n\t\t})\n\t})"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8b39f03a41c8b88774755c5483a8ef2b5c68368def29bdf1c6458a24ed2a1ba9ed335c683c00c64b12c1e0cb35ac05a804721de36fdc5204fba0e27225bf70d4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9e15b6ee-8adf-46e1-857b-d6047e0d834e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability from User-Controlled Data in HTML String\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/appHandler.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 2,
                  "endLine": 73,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tdb.Product.findAll({\n\t\twhere: {\n\t\t\tname: {\n\t\t\t\t[Op.like]: '%' + req.body.name + '%'\n\t\t\t}\n\t\t}\n\t}).then(products => {\n\t\toutput = {\n\t\t\tproducts: products,\n\t\t\tsearchTerm: req.body.name\n\t\t}\n\t\tres.render('app/products', {\n\t\t\toutput: output\n\t\t})\n\t})"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a7a2c2419ad731d3a3dfed12a18a08dacfcb71c5f7539fda3cb8ef0d82b16bf29852daad854e4f5ac19021961523932fc5ea09d72c74ed2a01587b1924cf54ff_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-a4a7eca9-75b2-4251-b068-7e07c3652f2b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 71,
                  "endLine": 20,
                  "endColumn": 95,
                  "snippet": {
                    "text": "                Listing products with <strong>search query: </strong> <%- output.searchTerm %>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f23b65be3fa20c158ba984837787d4685d0d43317525bcbaabcb4d05cc58247311122c2af57d7f851e7433888c697802776b471df665d84c95cef47f219aff3b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-5874e027-07ac-4d14-bcb7-da84e9449c0d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                <td><%- output.products[i].id %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f23b65be3fa20c158ba984837787d4685d0d43317525bcbaabcb4d05cc58247311122c2af57d7f851e7433888c697802776b471df665d84c95cef47f219aff3b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-cd1ae12b-c1db-4c2e-8084-2ace2687031e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 21,
                  "endLine": 50,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                <td><%- output.products[i].name %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f23b65be3fa20c158ba984837787d4685d0d43317525bcbaabcb4d05cc58247311122c2af57d7f851e7433888c697802776b471df665d84c95cef47f219aff3b_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-93046c14-faac-4b42-9dd4-0e1ca1fb3928",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 21,
                  "endLine": 51,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                <td><%- output.products[i].code %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f23b65be3fa20c158ba984837787d4685d0d43317525bcbaabcb4d05cc58247311122c2af57d7f851e7433888c697802776b471df665d84c95cef47f219aff3b_3"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-54a76b86-a166-4991-a16d-b9efd1071720",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 21,
                  "endLine": 53,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                <td><%- output.products[i].description %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f23b65be3fa20c158ba984837787d4685d0d43317525bcbaabcb4d05cc58247311122c2af57d7f851e7433888c697802776b471df665d84c95cef47f219aff3b_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-f070e6a1-fa54-472a-9f64-daf77ca72c99",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 21,
                  "endLine": 52,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                <td><%- output.products[i].tags %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f23b65be3fa20c158ba984837787d4685d0d43317525bcbaabcb4d05cc58247311122c2af57d7f851e7433888c697802776b471df665d84c95cef47f219aff3b_4"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}